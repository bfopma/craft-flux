{% extends '_layouts/cp' %}

{% import '_includes/forms' as forms %}
{% from 'flux/_macros' import configWarning %}

{% do view.registerAssetBundle('dyerc\\flux\\assetbundles\\FluxAssets') %}

{% set crumbs = [
  { label: 'Settings'|t('app'), url: url('settings') },
  { label: 'Plugins'|t('app'), url: url('settings/plugins') }
] %}

{% set title = 'Flux' %}

{% set tabs = {
  general: {label: 'General Settings'|t('flux'), url: '#general'},
  aws: {label: 'AWS Settings'|t('flux'), url: '#aws'},
  advanced: {label: 'Advanced Settings'|t('flux'), url: '#advanced'},
} %}

{% set fullPageForm = true %}

{% set siteColumn = [] %}
{% if craft.app.getIsMultiSite() %}
  {% set allSiteOptions = [{value: '', label: 'All Sites'|t('flux')}]|merge(siteOptions) %}
  {% set siteColumn = {
    siteId: {
      type: 'select',
      heading: 'Site'|t('flux'),
      options: allSiteOptions,
      thin: true,
    }
  } %}
{% endif %}

{% block actionButton %}

  <a href="{{ url('settings/plugins/flux?wizard=1') }}" class="btn">Run Setup Wizard</a>

  <input type="submit" class="btn submit" value="{{ 'Save'|t('app') }}">

{% endblock %}

{% block content %}

  <input type="hidden" name="action" value="flux/settings/save">
  <input type="hidden" name="pluginHandle" value="flux">

  <div id="general">
    <div class="flex">
      <div class="flex-grow field">
        {{ forms.lightswitchField({
            instructions: 'Intercept image transforms and route them through CloudFront'|t('flux'),
            label: "Enabled"|t('flux'),
            warning: config.enabled is defined ? configWarning('enabled'),
            name: 'settings[enabled]',
            on: settings.enabled,
          }) }}

        {{ forms.lightswitchField({
          instructions: 'Ensure requests originated from Craft by appending an HMAC verification token. Disabling will allow CloudFront to generate any transform variations based on any request it receives.'|t('flux'),
          label: "Verify Queries"|t('flux'),
          warning: config.verifyQuery is defined ? configWarning('verifyQuery'),
          name: 'settings[verifyQuery]',
          on: settings.verifyQuery,
        }) }}

        {{ forms.lightswitchField({
          instructions: 'For local asset file systems, store a duplicate in S3 to speed up processing asset variations. This will use more storage space in S3 at the expense of faster transforms. Has no effect for S3 based filesystems.'|t('flux'),
          label: "Cached Original Assets"|t('flux'),
          warning: config.cacheEnabled is defined ? configWarning('cacheEnabled'),
          name: 'settings[cacheEnabled]',
          on: settings.cacheEnabled,
        }) }}

        {{ forms.lightswitchField({
          instructions: 'When an asset is changed, automatically submit a CloudFront invalidation and purge any transformed files clearing the cache.'|t('flux'),
          label: "Auto Purge Assets"|t('flux'),
          warning: config.autoPurgeAssets is defined ? configWarning('autoPurgeAssets'),
          name: 'settings[autoPurgeAssets]',
          on: settings.autoPurgeAssets,
        }) }}
      </div>
    </div>
  </div>

  <div id="aws" class="hidden">
    {{ forms.autosuggestField({
      label: "AWS Access Key ID"|t('flux'),
      instructions: "An API key that can be used to clear, flush, purge, generate, deploy and refresh cache through a URL (min. 16 characters)."|t('flux'),
      suggestEnvVars: true,
      name: 'settings[awsAccessKeyId]',
      value: settings.awsAccessKeyId,
      class: 's3-key-id',
      required: true,
      errors: settings.getErrors('awsKey'),
    }) }}

    {{ forms.autosuggestField({
      label: "AWS Secret Access Key"|t('flux'),
      instructions: "An API key that can be used to clear, flush, purge, generate, deploy and refresh cache through a URL (min. 16 characters)."|t('flux'),
      suggestEnvVars: true,
      name: 'settings[awsSecretAccessKey]',
      value: settings.awsSecretAccessKey,
      class: 's3-secret-key',
      required: true,
      errors: settings.getErrors('awsSecretAccessKey'),
    }) }}

    {{ forms.autosuggestField({
      label: "AWS Resource Prefix"|t('flux'),
      instructions: "Prefix for auto generated resources. Useful if you plan to use Flux for multiple sites in the same AWS account."|t('flux'),
      suggestEnvVars: true,
      name: 'settings[awsResourcePrefix]',
      value: settings.awsResourcePrefix,
      required: true,
      errors: settings.getErrors('awsResourcePrefix'),
    }) }}

    {% set bucketInput %}
      <div class="flex fullwidth">
        {{ forms.select({
          name: 'settings[bucketSelectionMode]',
          options: [
            { label: 'Choose…'|t('flux'), value: 'choose' },
            { label: 'Manual…'|t('flux'), value: 'manual' }
          ],
          value: settings.bucketSelectionMode,
          toggle: true,
          targetPrefix: '.bsm-'
        }) }}

        <div class="bsm-choose{% if settings.bucketSelectionMode == 'manual' %} hidden{% endif %}">
          {{ forms.select({
            id: 'bucket',
            name: 'settings[awsBucket]',
            options: { (settings.awsBucket): settings.awsBucket },
            value: settings.bucketSelectionMode == 'manual' ? settings.awsBucket,
            readonly: true,
            class: 's3-bucket-select'
          }) }}
        </div>
        <div class="bsm-choose{% if settings.bucketSelectionMode == 'manual' %} hidden{% endif %}">
          <div class="btn s3-refresh-buckets">{{ "Refresh"|t('flux') }}</div>
        </div>
        <div class="bsm-choose{% if settings.bucketSelectionMode == 'manual' %} hidden{% endif %}">
          <div class="spinner hidden"></div>
        </div>

        <div class="bsm-manual{% if settings.bucketSelectionMode == 'choose' %} hidden{% endif %} flex-grow">
          {{ forms.autosuggest({
            label: "Bucket"|t('flux'),
            class: 'ltr s3-manualBucket',
            name: 'settings[manualBucket]',
            suggestEnvVars: true,
            value: settings.awsBucket,
            placeholder: 'Bucket'|t('flux')
          }) }}
        </div>
        <div class="bsm-manual{% if settings.bucketSelectionMode == 'choose' %} hidden{% endif %} flex-grow">
          {{ forms.autosuggest({
            label: "Region"|t('flux'),
            class: 'ltr s3-manualRegion',
            name: 'settings[manualRegion]',
            suggestEnvVars: true,
            value: settings.awsRegion,
            placeholder: 'Region'|t('flux')
          }) }}
        </div>
      </div>

      <input type="hidden" name="settings[awsRegion]" class="s3-region" value="{{ settings.awsRegion }}" />
    {% endset %}

    {{ forms.field({
      label: "S3 Bucket"|t('flux'),
      id: 'bucket',
      required: true,
      errors: settings.getErrors('bucket'),
    }, bucketInput) }}

    {{ forms.autosuggestField({
      label: "S3 Root Prefix"|t('flux'),
      instructions: "Prefix for all resources within the S3 bucket. Will not be shown publicly and is automatically assigned as an origin path on the CloudFront distribution"|t('flux'),
      suggestEnvVars: true,
      name: 'settings[rootPrefix]',
      value: settings.rootPrefix,
      required: true,
      errors: settings.getErrors('rootPrefix'),
    }) }}

    {% set distributionInput %}
      <div class="flex fullwidth">
        {{ forms.select({
          name: 'settings[distributionSelectionMode]',
          options: [
            { label: 'Choose…'|t('flux'), value: 'choose' },
            { label: 'Manual…'|t('flux'), value: 'manual' }
          ],
          value: settings.distributionSelectionMode,
          toggle: true,
          targetPrefix: '.cf-'
        }) }}

        <div class="cf-choose{% if settings.distributionSelectionMode == 'manual' %} hidden{% endif %}">
          {{ forms.select({
            id: 'bucket',
            name: 'settings[cloudFrontDistributionId]',
            options: { (settings.cloudFrontDistributionId): settings.cloudFrontDistributionId },
            value: settings.bucketSelectionMode == 'manual' ? settings.cloudFrontDistributionId,
            readonly: true,
            class: 'cf-distribution-select'
          }) }}
        </div>
        <div class="cf-choose{% if settings.distributionSelectionMode == 'manual' %} hidden{% endif %}">
          <div class="btn cf-refresh-distributions">{{ "Refresh"|t('flux') }}</div>
        </div>
        <div class="cf-choose{% if settings.distributionSelectionMode == 'manual' %} hidden{% endif %}">
          <div class="spinner hidden"></div>
        </div>

        <div class="cf-manual{% if settings.distributionSelectionMode == 'choose' %} hidden{% endif %} flex-grow">
          {{ forms.autosuggest({
            label: "Distribution"|t('flux'),
            class: 'ltr cf-manualDistributionId',
            name: 'settings[manualCloudFrontDistributionId]',
            suggestEnvVars: true,
            value: settings.cloudFrontDistributionId,
            placeholder: 'CloudFront Distribution Id'|t('flux')
          }) }}
        </div>
        <div class="cf-manual{% if settings.distributionSelectionMode == 'choose' %} hidden{% endif %} flex-grow">
          {{ forms.autosuggest({
            label: "Region"|t('flux'),
            class: 'ltr cf-manualDomain',
            name: 'settings[manualCloudfrontDomain]',
            suggestEnvVars: true,
            value: settings.cloudFrontDomain,
            placeholder: 'CloudFront Domain'|t('flux')
          }) }}
        </div>
      </div>

      <input type="hidden" name="settings[cloudFrontDomain]" class="cf-domain" value="{{ settings.cloudFrontDomain }}" />
    {% endset %}

    {{ forms.field({
      label: "CloudFront Distribution"|t('flux'),
      id: 'distribution',
      required: true,
      errors: settings.getErrors('distribution'),
    }, distributionInput) }}
  </div>

  <div id="advanced" class="hidden">
    {{ forms.lightswitchField({
      instructions: 'Automatically serve WebP files if the users browser supports it via the Accept header.'|t('flux'),
      label: "Accept WebP"|t('flux'),
      warning: config.acceptWebp is defined ? configWarning('acceptWebp'),
      name: 'settings[acceptWebp]',
      on: settings.acceptWebp,
    }) }}

    {{ forms.textField({
      label: "Default JPG Quality"|t('flux'),
      warning: config.jpegQuality is defined ? configWarning('jpegQuality'),
      name: 'settings[jpegQuality]',
      value: settings.jpegQuality,
      errors: settings.getErrors('jpegQuality'),
    }) }}

    {{ forms.textField({
      label: "Default WebP Quality"|t('flux'),
      warning: config.webpQuality is defined ? configWarning('webpQuality'),
      name: 'settings[webpQuality]',
      value: settings.webpQuality,
      errors: settings.getErrors('webpQuality'),
    }) }}

    {{ forms.lightswitchField({
      instructions: 'Log more detailed information to CloudWatch.'|t('flux'),
      label: "Enable Logging"|t('flux'),
      warning: config.loggingEnabled is defined ? configWarning('loggingEnabled'),
      name: 'settings[loggingEnabled]',
      on: settings.loggingEnabled,
    }) }}

    {{ forms.selectField({
      instructions: 'Processor size is proportional to memory assigned so it is sensible to be generous with memory allowance, in order to reduce overall processing time. This memory limit applies to the origin response Lambda function.'|t('flux'),
      label: "Lambda Memory"|t('flux'),
      warning: config.lambdaMemory is defined ? configWarning('lambdaMemory'),
      name: 'settings[lambdaMemory]',
      value: settings.lambdaMemory,
      errors: settings.getErrors('lambdaMemory'),
      options: [
        { label: "128 MB", value: "128" },
        { label: "256 MB", value: "256" },
        { label: "512 MB", value: "512" },
        { label: "768 MB", value: "768" },
        { label: "1024 MB", value: "1024" },
        { label: "2048 MB", value: "2048" },
        { label: "4096 MB", value: "4096" },
        { label: "8192 MB", value: "8192" },
      ]
    }) }}

    {{ forms.selectField({
      instructions: 'Maximum time a conversion operation can run.'|t('flux'),
      label: "Lambda Timeout"|t('flux'),
      warning: config.lambdaTimeout is defined ? configWarning('lambdaTimeout'),
      name: 'settings[lambdaTimeout]',
      value: settings.lambdaTimeout,
      errors: settings.getErrors('lambdaTimeout'),
      options: [
        { label: "3 seconds", value: "3" },
        { label: "5 seconds", value: "5" },
        { label: "10 seconds", value: "10" },
        { label: "12 seconds", value: "12" },
        { label: "15 seconds", value: "15" },
        { label: "20 seconds", value: "20" },
        { label: "30 seconds", value: "30" },
        { label: "45 seconds", value: "45" },
        { label: "60 seconds", value: "60" },
      ]
    }) }}
  </div>

{% endblock %}